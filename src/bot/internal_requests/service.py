import mimetypes
import urllib.parse
from typing import List, Optional

from httpx import AsyncClient, Response

from internal_requests.entities import Location, UserProfile


class APIService:
    """
    –°–µ—Ä–≤–∏—Å API-–∑–∞–ø—Ä–æ—Å–æ–≤.
    """

    def __init__(self, base_url: str) -> None:
        self.base_url: str = base_url

    async def save_photo(
        self,
        telegram_id: int,
        photo_bytearray: bytearray,
        filename: str,
        file_id: str,
        coliving_id: Optional[int] = None,
    ) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ 'ProfileImage' –∏ 'ColivingImage'
        –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å.
        """
        endpoint_urn = (
            f"users/{telegram_id}/colivings/{coliving_id}/images/"
            if coliving_id
            else f"users/{telegram_id}/profile/images/"
        )
        files = {
            "image": (
                filename,
                bytes(photo_bytearray),
                mimetypes.guess_type(filename, strict=True)[0],
            )
        }
        data = dict(file_id=file_id)
        await self._post_request(endpoint_urn, files, data)

    async def get_locations(self) -> List[Location]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–π.
        """
        response = await self._get_request("locations/")
        data = response.json()
        locations = [Location(id=item["id"], name=item["name"]) for item in data]
        return locations

    async def get_user_profile_by_telegram_id(
        self, telegram_id: int
    ) -> Optional[UserProfile]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É —Ç–µ–ª–µ–≥—Ä–∞–º–∞.

        :param telegram_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :return: –û–±—ä–µ–∫—Ç UserProfile –∏–ª–∏ None, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.
        """
        response = await self._get_request(f"users/{telegram_id}/profile/")
        return UserProfile(**response.json())

    async def create_user_profile(
        self, telegram_id: int, data: dict
    ) -> Optional[UserProfile]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param telegram_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param data: –û–±—ä–µ–∫—Ç UserProfile —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.
        :return: –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ None, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.
        """
        return await self._profile_request(telegram_id, data, method="post")

    async def update_user_profile(
        self, telegram_id: int, data: dict
    ) -> Optional[UserProfile]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param telegram_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param data: –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.
        :return: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ None, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.
        """
        return await self._profile_request(telegram_id, data, method="patch")

    async def _profile_request(
        self, telegram_id: int, data: dict, method: str
    ) -> Optional[UserProfile]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.

        :param telegram_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param data: –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è.
        :param method: HTTP-–º–µ—Ç–æ–¥ ('post' –∏–ª–∏ 'patch').
        :return: –°–æ–∑–¥–∞–Ω–Ω—ã–π –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ None, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.
        """
        endpoint_urn = f"users/{telegram_id}/profile/"
        request_data = {
            "name": data.get("name", ""),
            "sex": data.get("sex", "").replace("üö∫", "").replace("üöπ", ""),
            "age": data.get("age", 0),
            "location": data.get("location", ""),
            "about": data.get("about", ""),
            "is_visible": data.get("is_visible", True),
        }
        response = await getattr(self, f"_{method}_request")(
            endpoint_urn, data=request_data
        )
        return UserProfile(**response.json())

    async def _post_request(
        self,
        endpoint_urn: str,
        files: Optional[dict] = None,
        data: Optional[dict] = None,
    ) -> Response:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É.

        :param endpoint_urn: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URI —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞.
        :param files: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –°–ª–æ–≤–∞—Ä—å —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        (–≤ —Ñ–æ—Ä–º–∞—Ç–µ {'file_field_name': ('filename', bytes, 'content_type')}).
        :param data: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
        """
        async with AsyncClient() as client:
            url: str = urllib.parse.urljoin(base=self.base_url, url=endpoint_urn)
            if files:
                response: Response = await client.post(url=url, files=files, data=data)
            elif data:
                response: Response = await client.post(url=url, json=data)
            else:
                raise ValueError("–û–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è 'files' –∏ 'data' –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å None.")
            response.raise_for_status()
        return response

    async def _get_request(self, endpoint_urn: str) -> Response:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É.
        """
        async with AsyncClient() as client:
            url: str = urllib.parse.urljoin(base=self.base_url, url=endpoint_urn)
            response: Response = await client.get(url)
            response.raise_for_status()
        return response

    async def _patch_request(
        self,
        endpoint_urn: str,
        data: Optional[dict] = None,
    ) -> Response:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç PATCH-–∑–∞–ø—Ä–æ—Å –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —ç–Ω–¥–ø–æ–∏–Ω—Ç—É.

        :param endpoint_urn: –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URI —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞.
        :param data: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
        """
        async with AsyncClient() as client:
            url: str = urllib.parse.urljoin(base=self.base_url, url=endpoint_urn)
            response: Response = await client.patch(url=url, json=data)
            response.raise_for_status()
        return response
